---
- name: install dependencies
  ansible.builtin.dnf:
    name: "{{ packages }}"
    state: present
    allowerasing: true
  vars:
    packages:
      - curl
      - unzip
      - jq
      - retry
      - tar
      - xz

- name: vault group
  ansible.builtin.group:
    name: vault
    state: present
    system: true

- name: vault user
  ansible.builtin.user:
    name: vault
    group: vault
    system: true
    create_home: false

- name: create vault directories
  ansible.builtin.file:
    owner: vault
    group: vault
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - "{{ vault_dir }}"
    - "{{ vault_bin_dir }}"

- name: create vault directories
  ansible.builtin.file:
    owner: vault
    group: vault
    path: "{{ item }}"
    state: directory
    mode: "0750"
  with_items:
    - "{{ vault_dir }}/data"
    - "{{ vault_dir }}/config"
    - "{{ vault_dir }}/tls"
    - "{{ vault_dir }}/tls/ca"
    - "{{ vault_dir }}/plugins"
    - "{{ vault_dir }}/policy"

- name: check vault version
  ansible.builtin.slurp:
    src: "{{ vault_dir }}/version"
  register: vault_current_version
  changed_when: false
  ignore_errors: true

- name: install vault
  when: vault_current_version.failed or vault_current_version['content'] | b64decode != vault_archive
  block:
    - name: download vault
      ansible.builtin.get_url:
        url: "{{ vault_zip_url }}"
        dest: /tmp/{{ vault_archive }}
        checksum: sha256:{{ vault_checksum_file_url }}
        mode: "0660"

    - name: extract vault
      ansible.builtin.unarchive:
        src: /tmp/{{ vault_archive }}
        dest: "{{ vault_bin_dir }}"
        remote_src: true

    - name: cleanup
      ansible.builtin.file:
        path: /tmp/{{ vault_archive }}
        state: absent

    - name: chcon vault binary
      ansible.builtin.file:
        path: "{{ vault_bin_dir }}/vault"
        owner: vault
        group: vault
        mode: "0755"
        setype: bin_t
        seuser: system_u

    - name: give the vault executable the ability to use the mlock syscall
      community.general.capabilities:
        path: "{{ vault_bin_dir }}/vault"
        capability: cap_ipc_lock=+ep
        state: present

    - name: write version
      ansible.builtin.copy:
        content: "{{ vault_archive }}"
        dest: "{{ vault_dir }}/version"
        owner: root
        group: root
        mode: "0644"

- name: create a vault symbolic link
  ansible.builtin.file:
    src: "{{ vault_bin_dir }}/vault"
    dest: /usr/bin/vault
    owner: vault
    group: vault
    mode: "0755"
    state: link

- name: create directory for systemd drop-ins
  ansible.builtin.file:
    path: /etc/systemd/system/vault.service.d
    owner: root
    group: root
    state: directory
    mode: "0755"

- name: copy run-vault script
  ansible.builtin.copy:
    src: files/run-vault
    dest: "{{ vault_bin_dir }}/run-vault"
    mode: "0770"
    owner: vault
    group: vault
  tags:
    - run-vault

- name: copy vault-online script
  ansible.builtin.copy:
    src: files/vault-online
    dest: "{{ vault_bin_dir }}/vault-online"
    mode: "0770"
    owner: vault
    group: vault
  tags:
    - run-vault

- name: copy vault-snapshot script
  ansible.builtin.copy:
    src: files/vault-snapshot
    dest: "{{ vault_bin_dir }}/vault-snapshot"
    mode: "0770"
    owner: vault
    group: vault
  tags:
    - run-vault

- name: copy run-vault-setup script
  ansible.builtin.copy:
    src: files/run-vault-setup
    dest: "{{ vault_bin_dir }}/run-vault-setup"
    mode: "0770"
    owner: vault
    group: vault
  tags:
    - run-vault-setup

- name: prevent core dumps
  ansible.posix.sysctl:
    name: kernel.core_pattern
    value: "|/bin/false"
    state: present
  when: not vault_role_debug | bool

- name: set fs.suid_dumpable
  ansible.posix.sysctl:
    name: fs.suid_dumpable
    value: "0"
    state: present
  when: not vault_role_debug | bool

- name: write /etc/security/limits.d/vault.conf
  ansible.builtin.copy:
    content: "* hard core 0"
    dest: /etc/security/limits.d/vault.conf
    owner: root
    group: root
    mode: "0644"

- name: create coredump systemd drop-in
  ansible.builtin.file:
    path: /etc/systemd/system/coredump.conf.d
    owner: root
    group: root
    state: directory
    mode: "0755"

- name: write /etc/profile.d/ulimit.sh
  ansible.builtin.copy:
    content: ulimit -S -c 0 > /dev/null  2>&1
    dest: /etc/profile.d/ulimit.sh
    owner: root
    group: root
    mode: "0644"

- name: disable coredump
  ansible.builtin.template:
    src: coredump-disable.conf.j2
    dest: /etc/systemd/system/coredump.conf.d/disable.conf
    owner: root
    group: root
    mode: "0644"

- name: write /etc/profile.d/vault.sh
  ansible.builtin.template:
    src: profile-vault.sh.j2
    dest: /etc/profile.d/vault.sh
    owner: root
    group: root
    mode: "0644"

- ansible.builtin.include_tasks: vault-plugin-secrets-github.yml
  tags:
    - vault-plugins

- ansible.builtin.include_tasks: vault-plugin-secrets-oauthapp.yml
  tags:
    - vault-plugins

- ansible.builtin.include_tasks: storage-setup.yml
  when: (storage_setup_physical_device is defined) and (storage_setup_physical_device | length > 0) and (vault_volume|bool)
